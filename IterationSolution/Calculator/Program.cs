// See https://aka.ms/new-console-template for more information
Console.WriteLine("\n\tCalculator - it just adds up\n\n");

/*
 * Name Don Welch
 * Last Modified Oct 11 2024
 * 
 * this demo will cover the do-while loop
 * it will demonstrate a menu selection
 * a) Addition
 * b) Subtraction
 * c) Multiplication
 * d) Division (integer)
 * x) exit
 * 
 * the user will be asked to chose an option,
 * depending on the option, the calculation will be performed
 * the program will continue until the user selects exit
 * the program will demonstration exception handling of errors instead of
 *      defensive programing
 */

string inputValue = "";
char menuChoice = ' ';
Random rnd = new Random();
int firstNumber = 0;
int secondNumber = 0;
int userGuess = 0;
int calculatedResult = 0;
bool valid = false; //this is a bool flag for loop checking

//do while loop
//post test structure which means the loop will be done at least once

//syntax
//      do
//      {
//          logic/code
//      }while (condition);

do
{
    Console.WriteLine("\nYour choices for a calculation are:");
    Console.WriteLine("a) Addition");
    Console.WriteLine("b) Subtration");
    Console.WriteLine("c) Multiplication");
    Console.WriteLine("d) Division (integer)");
    Console.WriteLine("x) Exit");
    Console.Write("Enter your calculation choice:\t");

    //generate two random numbers to use in the calculation
    firstNumber = rnd.Next(0, 101); //the value are (inclusive, exclusive)
    secondNumber = rnd.Next(0, 101);

    //to handle system exception (errors generated by your code) use the Try/Catch
    //the area under the try is the code you are attempting to execute
    //if a problem occurs, execution is transfer to the catch code
    //this try/catch structure allows for a "soft" landing incase of errors
    //often referred to as: user friendly error handling
    try
    {
        inputValue = Console.ReadLine();
        menuChoice = char.Parse(inputValue);

        Console.WriteLine($"\nYou enterd {menuChoice}");

        switch(char.ToUpper(menuChoice))
        {
            case 'A':
                {
                    do
                    {
                        valid = true; //assume the user can give a valid integer input
                        try
                        {
                            Console.Write($"\nWhat is the answer to {firstNumber} + {secondNumber}\t");
                            userGuess = int.Parse(Console.ReadLine());
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"\n\tError: {ex.Message}");
                            valid = false;
                        }
                    } while (!valid);
                    calculatedResult = firstNumber + secondNumber;
                    if (userGuess == calculatedResult)
                    {
                        Console.WriteLine($"\nYour answer of {userGuess} is correct");
                    }
                    else
                    {
                        Console.WriteLine($"\nYour answer of {userGuess} is incorrect");
                    }
                    break;
                }
            case 'B':
                {
                    do
                    {
                        valid = true; //assume the user can give a valid integer input
                       
                        Console.Write($"\nWhat is the answer to {firstNumber} - {secondNumber}\t");
                        inputValue =Console.ReadLine();
                        if(!int.TryParse(inputValue, out userGuess))
                        {
                            Console.WriteLine($"\n\tInput Error: >{inputValue}<");
                            valid = false;
                        }
                    } while (!valid);
                    calculatedResult = firstNumber - secondNumber;
                    if (userGuess == calculatedResult)
                    {
                        Console.WriteLine($"\nYour answer of {userGuess} is correct");
                    }
                    else
                    {
                        Console.WriteLine($"\nYour answer of {userGuess} is incorrect");
                    }
                    break;
                }
            case 'X':
                {
                    Console.WriteLine("thank you for using our calculator");
                    break;
                }
            default:
                {
                    //a domain validation
                    Console.WriteLine($"Your menu choice of >{menuChoice}< is invalid. try again");
                    break;
                }

        }//eos
    }
    catch (Exception ex)
    {
        //output a message to the user about the exception (problem)
        //the Exception class is the generic class for handling program exceptions
        Console.WriteLine($"\n\tError: {ex.Message}");
    }
} while (char.ToUpper(menuChoice) != 'X');